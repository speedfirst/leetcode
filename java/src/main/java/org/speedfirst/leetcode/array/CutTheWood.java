package org.speedfirst.leetcode.array;

/**
 * Cut the woods with length L1, L2, L3, ... to equal pieces. Given totally get k pieces, get the maximum length to cut.
 * Wood cut example:
 * L: {1, 2, 3}, cut Length = 1, total pieces = 1/1 + 2/1 + 3/1 = 6
 * L: {1, 2, 3}, cut Length = 2, total pieces = 1/2 + 2/2 + 3/2 = 3 (length 1 < 2, so no piece is generated by wood with length 1)
 * L: {1, 2, 3}, cut Length = 3, total pieces = 1/3 + 2/3 + 3/3 = 1 (length 1, 2 < 3, so no piece is generated by wood with length 1 and 2)
 *
 * If you expect K = 3, then solution is 2
 */
public class CutTheWood {

    public int woodCut(int[] L, int k) {
        if (L.length == 0) {
            return 0;
        }
        int maxL = Integer.MIN_VALUE;
        int sum = 0;

        for (int l: L) {
            maxL = Math.max(maxL, l);
            sum += l;
        }

        if (sum < k) {
            return 0; // Note, if it's impossible to get a solution
        }

        int s = 1, e = maxL;
        while (s < e) {
            int mid = ((e - s + 1) >> 1) + s;
            sum = 0;
            for (int l: L) {
                sum += (l / mid);
            }

            if (sum < k) {
                e = mid - 1;
            } else {
                s = mid;
            }
        }

        return s;
    }

    public static void main(String[] args) {
        CutTheWood c = new CutTheWood();
        // int res = c.woodCut(new int[]{232, 124, 456}, 7);
        int res = c.woodCut(new int[]{51,8477,6344,6510,9179,5734,1488,9368,6972,4474,5715,8155,3291,6837,9971,501,3005,1952,4837,5446,2401,4614,3912,163,302,2392,7431,8726,9728,9905}, 10);
        System.out.println(res);
    }
}
