namespace ReverseLinkedList2 {
  class Solution {
  public:
  
      ListNode *reverseBetween(ListNode *head, int m, int n) {
          if (head == NULL) {
              return NULL;
          }
          
          if (m == n) {
              return head;
          }
          
          ListNode dummy(-1);
          dummy.next = head;
          ListNode * prev = &dummy;
          ListNode * cur = head;
          
          // first move to pos m
          for (int i = 1; i < m; i++) {
              prev = cur;
              cur = cur->next;
          }
          
          ListNode * newPrev = NULL;
          ListNode * newCur = cur;
          ListNode * newNext = cur->next;
          for (int i = 0; i < (n - m + 1); i++) {
              newCur->next = newPrev;
              newPrev = newCur;
              newCur = newNext;
              if (newNext != NULL) {
                  newNext = newNext->next;
              }
          }
          
          cur->next = newCur;
          prev->next = newPrev;
          
          return dummy.next;
      }
  };
}
